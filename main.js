const API_KEY = "AIzaSyAp925PgZRGdwPKkdfA4PqAmLVeAMZDVeU"; // <- cole sua chave aqui 

// Link CSV da planilha 
const URL_CSV = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSdy74VMFCuowXzxgtAcYPDLmU6cj4crafrcd5DrvbltDRYN-_2JbaJZonYOK710n8sVUOhwS5bf9Tl/pub?output=csv"; 
let dadosPlanilha = []; 

async function lerCSV(url) { 
  const resp = await fetch(url); 
  const text = await resp.text(); 
  const linhas = text.trim().split("\n").map(l => l.split(",")); 
  return linhas; 
}

// ---------------------- Prompts ----------------------

const entendimentoInfo = `
    Voc√™ √© um assistente educacional de programa√ß√£o que segue a metodologia de Polya. 
    Fluxo para cada quest√£o: 
    1. Perguntar ENTRADAS e validar. 
    2. Perguntar SA√çDAS e validar. 
    3. Perguntar RESTRI√á√ïES e validar. 
    4. Conduzir o aluno a propor um PLANO DE DESENVOLVIMENTO. 
    Responda sempre de forma breve, clara e incentivadora: 
    - Se estiver incompleto: use a tag fixa "ü§î Vamos pensar mais um pouco..." (m√°x. 2 frases) 
    - Se a resposta estiver completa: comece com "‚úÖ Legal!" e confirme de forma breve. 
    N√£o repita instru√ß√µes j√° dadas.
    Utilize emojis sempre que conveniente. 
`;

const planejamentoInfo = `
    Agora voc√™ est√° na etapa de PLANEJAMENTO, seguindo a metodologia de Polya.
    O aluno deve criar um pseudoc√≥digo ou fluxograma para organizar o racioc√≠nio.
    Sua fun√ß√£o:
    1. Incentivar o aluno a escrever um passo a passo simples (pseudoc√≥digo ou fluxograma textual).
    2. Se o aluno ainda n√£o entender, sugira exemplos bem b√°sicos para gui√°-lo.
    3. Se o aluno demonstrar clareza (pseudoc√≥digo consistente), confirme com "‚úÖ Legal!" e direcione para o desenvolvimento.
`;


const codificacaoInfo = `
    Agora voc√™ est√° na etapa de CODIFICA√á√ÉO, seguindo a metodologia de Polya.  
    Fluxo:  
    1. Incentivar o aluno a propor um esqueleto inicial de c√≥digo (mesmo que incompleto).  
    2. Conduzir o aluno em pequenas etapas:  
       - Declara√ß√£o das vari√°veis de entrada.  
       - Processamento ou c√°lculos.  
       - Exibi√ß√£o dos resultados.
       - C√≥digo completo  
    3. Sempre dar feedback curto, motivador e claro.  
    4. Sugerir UMA melhoria ou pr√≥ximo passo por vez.  
    Use exemplos simples e trechos de c√≥digo quando for √∫til.  
`;

// ---------------------- INTERFACE ----------------------

const chatWindow = document.getElementById('chatWindow'); 
const chatBtn = document.getElementById('chatBtn'); 
const closeBtn = document.getElementById('closeBtn'); 
const messageInput = document.getElementById('messageInput'); 
const sendBtn = document.getElementById('sendBtn'); 
const chatMessages = document.getElementById('chatMessages'); 

let model = null; 
let currentStep = null; 
let questaoAtual = ""; 

// vari√°veis para armazenar respostas 

let entradas = ""; 
let hipoteseEntradas = ""; 
let saidas = ""; 
let hipoteseSaidas = ""; 
let restricoes = ""; 
let hipoteseRestricoes = ""; 

// ---------------------- Fun√ß√µes de UI ----------------------

function toggleChat() { 
  chatWindow.classList.toggle('open'); 
  if (chatWindow.classList.contains('open')) { 
    messageInput.focus(); 
  } 
} 

function addMessage(content, isUser = false, isError = false) { 
  const messageDiv = document.createElement('div'); 
  messageDiv.className = `message ${isUser ? 'user' : isError ? 'error' : 'bot'}`; 
  messageDiv.textContent = content; 
  chatMessages.appendChild(messageDiv); 
  chatMessages.scrollTop = chatMessages.scrollHeight; 
} 

function showTyping() { 
  const typingDiv = document.createElement('div'); 
  typingDiv.className = 'typing-indicator'; 
  typingDiv.id = 'typing'; 
  typingDiv.innerHTML = `<div class="typing-dots"> <span></span><span></span><span></span> </div>`; 
  chatMessages.appendChild(typingDiv); 
  chatMessages.scrollTop = chatMessages.scrollHeight; 
} 

function hideTyping() { 
  const typing = document.getElementById('typing'); 
  if (typing) typing.remove(); 
} 

// ---------------------- API ---------------------- 

async function sendToAPI(message, context = "") { 
  showTyping(); 
  try { 
    let text = "Resposta simulada."; 
    if (model) { 
      const prompt = `${context}\nQuest√£o: ${questaoAtual}\nAluno: ${message}`; 
      const result = await model.generateContent(prompt); 
      text = result.response.text(); 
    } 
    hideTyping(); 
    addMessage(text); 
    return text; 
  } catch (error) { 
    console.error("Erro:", error); 
    hideTyping(); 
    addMessage("Erro ao consultar a API.", false, true); 
  } 
} 

// ---------------------- Fluxo ----------------------

async function sendMessage() { 
  const message = messageInput.value.trim(); 
  if (!message) return; 

  addMessage(message, true); 
  messageInput.value = ''; 

  // Caso inicial: aluno escolhe a quest√£o 

  if (!questaoAtual) { 
    const numero = parseInt(message); 
    if (!isNaN(numero) && numero >= 2 && numero <= 42) { 
      questaoAtual = dadosPlanilha[numero - 1][0]; 
      addMessage(`Quest√£o ${numero}: "${questaoAtual}"`); 
      addMessage("Vamos come√ßar pela etapa de ENTENDIMENTO.\nQuais s√£o as ENTRADAS (dados de entrada) que o programa receber√°?"); 
      currentStep = "entendimento_input"; 
    } else { 
      addMessage("Digite um n√∫mero de quest√£o v√°lido (2 a 42).", false, true); 
    } 
    return; 
  } 

  // ---------------- ENTENDIMENTO ---------------- 

  // ---------------- ENTRADAS ---------------- 

  if (currentStep === "entendimento_input") { 
    const feedback = await sendToAPI(message, "O estudante respondeu sobre as ENTRADAS. Responda amigavelmente e incentive a pensar"); 
    
    if (feedback.startsWith("ü§î")) { 
      currentStep = "planejamento_condicional"; 
      addMessage("ü§î Vamos pensar mais um pouco... Para te ajudar, que tal criar um pseudoc√≥digo ou fluxograma para o problema?");
    } else { 
      entradas = message; 
      currentStep = "entendimento_output"; 
      addMessage("Agora, quais ser√£o as SA√çDAS (resultados) do programa?"); 
    } 
    return; 
  } 

  // ---------------- SA√çDAS ---------------- 

  if (currentStep === "entendimento_output") { 
    const feedback = await sendToAPI(message, "O aluno respondeu sobre as SA√çDAS. Responda amigavelmente"); 
    
    if (feedback.startsWith("ü§î")) { 
      currentStep = "planejamento_condicional"; 
      addMessage("ü§î Vamos pensar mais um pouco... Para te ajudar, que tal criar um pseudoc√≥digo ou fluxograma para o problema?");
    } else { 
      saidas = message; 
      currentStep = "entendimento_condicoes"; 
      addMessage("Existem RESTRI√á√ïES ou CONDI√á√ïES especiais a considerar?"); 
    } 
    return; 
  } 

  // ---------------- RESTRI√á√ïES ---------------- 

  if (currentStep === "entendimento_condicoes") { 
    const feedback = await sendToAPI(message, "O aluno respondeu sobre as RESTRI√á√ïES. Responda amigavelmente"); 
    
    if (feedback.startsWith("ü§î")) { 
      currentStep = "planejamento_condicional"; 
      addMessage("ü§î Vamos pensar mais um pouco... Para te ajudar, que tal criar um pseudoc√≥digo ou fluxograma para o problema?");
    } else { 
      restricoes = message; 
      currentStep = "desenvolvimento"; 
      addMessage("Muito bem! Agora vamos para a etapa de DESENVOLVIMENTO.\nComo voc√™ resolveria este problema passo a passo?"); 
    } 
    return; 
  }

  // ---------------- PLANEJAMENTO CONDICIONAL ----------------

  if (currentStep === "planejamento_condicional") {
  const feedback = await sendToAPI(message, planejamentoInfo);

  if (feedback.includes("‚úÖ")) {
    currentStep = "desenvolvimento";
    addMessage("√ìtimo! Agora que voc√™ tem um plano, vamos para a etapa de DESENVOLVIMENTO.\nComo voc√™ resolveria este problema passo a passo?");
  } else {
    addMessage("Continue tentando escrever seu pseudoc√≥digo ou fluxograma. Isso vai te ajudar a entender melhor o problema! üí°");
  }
  return;
}

  // ---------------- DESENVOLVIMENTO ---------------- 

  if (currentStep === "desenvolvimento") { 
    await sendToAPI(message, "Analise este plano de resolu√ß√£o. Se n√£o precisar de melhoria, elogie o estudante e o instrua a iniciar a codifica√ß√£o."); 
    currentStep = "codificacao_variaveis"; 
    addMessage("Legal! Agora que voc√™ tem um plano de desenvolvimento, vamos para a etapa de CODIFICA√á√ÉO.\nComo voc√™ declararia as vari√°veis de entrada?"); 
    return; 
  }


// ---------------- CODIFICA√á√ÉO ---------------- 

// ---------------- ENTRADA E PROCESSAMENTO ---------------- 

  if (currentStep === "codificacao_variaveis") { 
    await sendToAPI(message, codificacaoInfo + "\nO aluno declarou o c√≥digo das vari√°veis de entrada do programa. Se n√£o precisar de melhoria pergunte sobre o processamento ou c√°lculo"); 
    currentStep = "codificacao_processamento"; 
    //addMessage("Boa! E como ficaria o processamento deste programa?"); 
    return; 
  } 

// ---------------- RESULTADO ----------------

  if (currentStep === "codificacao_processamento") { 
    await sendToAPI(message, codificacaoInfo + "\nO aluno escreveu o c√≥digo do processamento do programa, ele j√° tinha te mandado o c√≥digo da entrada. Se n√£o precisar de melhoria pergunte sobre a sa√≠da do programa"); 
    currentStep = "codificacao_saida"; 
    //addMessage("Perfeito üëç Agora, como voc√™ exibiria o resultado?"); 
    return; 
  } 

// ---------------- FINALIZA√á√ÉO ----------------

  if (currentStep === "codificacao_saida") { 
    await sendToAPI(message, codificacaoInfo + "\nO aluno sugeriu o c√≥digo da sa√≠da do programa.Se n√£o precisar de melhoria elogie o estudante"); 
    currentStep = null; 
    addMessage("üéâ Muito bem! Voc√™ completou todas as etapas: ENTENDIMENTO e CODIFICA√á√ÉO."); 
    return; 
  } 

  // fallback 
  sendToAPI(message); 
} 


// ---------------------- Eventos ---------------------- 
chatBtn.addEventListener('click', toggleChat); 
closeBtn.addEventListener('click', toggleChat); 
sendBtn.addEventListener('click', sendMessage); 

messageInput.addEventListener('keypress', (e) => { 
  if (e.key === 'Enter' && !e.shiftKey) { 
    e.preventDefault(); 
    sendMessage(); 
  } 
}); 

// ---------------------- Inicializa√ß√£o ---------------------- 
async function initAPI() { 
  if (!API_KEY) { 
    console.warn("Nenhuma chave definida. Usando modo simulado."); 
  } else { 
    try { 
      const { GoogleGenerativeAI } = await import("https://esm.run/@google/generative-ai"); 
      const genAI = new GoogleGenerativeAI(API_KEY); 
      model = genAI.getGenerativeModel({ model: "gemini-1.5-flash", systemInstruction: entendimentoInfo }); 
      console.log("API carregada com sucesso."); 
    } catch (error) { 
      console.error("Erro ao carregar a API:", error); 
    } 
  } 

  try { 
    dadosPlanilha = await lerCSV(URL_CSV); 
    addMessage("Digite o n√∫mero da quest√£o que voc√™ quer ajuda (2 a 42)."); 
  } catch (error) { 
    addMessage("N√£o consegui carregar o banco de quest√µes.", false, true); 
  } 
} 

initAPI();